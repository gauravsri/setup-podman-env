# =============================================================================
# EXAMPLE Environment Configuration for Modular Pod Management
# =============================================================================
# Copy this file to .env and modify for your project
#
# Usage:
#   cp .env.example .env
#   # Edit .env with your project-specific values
#   ./setup-env.sh basic|full

# Project Configuration
PROJECT_NAME="your-project"                    # Used as prefix for containers
PROJECT_DESCRIPTION="Your Project Description"

# Network Configuration
NETWORK_NAME="${PROJECT_NAME}-network"

# =============================================================================
# SERVICE SELECTION - Specify which services your project needs
# =============================================================================
# Available services: minio, dremio, airflow, zincsearch, redpanda, postfix, dex, spark
# Examples:
#   ENABLED_SERVICES="minio,dremio"          # Basic data stack
#   ENABLED_SERVICES="minio,dremio,airflow"  # Full stack with orchestration
#   ENABLED_SERVICES="minio,zincsearch"      # Storage + search
#   ENABLED_SERVICES="redpanda,spark"        # Streaming + processing
#   ENABLED_SERVICES="dex,postfix"           # Auth + email
ENABLED_SERVICES="minio,dremio,airflow"

# =============================================================================
# MINIO CONFIGURATION (S3-Compatible Storage)
# =============================================================================
MINIO_CONTAINER_NAME="${PROJECT_NAME}-minio"
MINIO_IMAGE="quay.io/minio/minio:latest"
MINIO_PORT="9000"                             # API port
MINIO_CONSOLE_PORT="9001"                     # Web UI port
MINIO_VOLUME_NAME="minio-data"
MINIO_MEMORY="256m"                           # Memory limit
MINIO_ROOT_USER="minioadmin"                  # Admin username
MINIO_ROOT_PASSWORD="minioadmin"              # Admin password

# =============================================================================
# DREMIO CONFIGURATION (SQL Federation Engine)
# =============================================================================
DREMIO_CONTAINER_NAME="${PROJECT_NAME}-dremio"
DREMIO_IMAGE="dremio/dremio-oss:latest"
DREMIO_HTTP_PORT="8080"                       # Web UI port
DREMIO_JDBC_PORT="9047"                       # JDBC connection port
DREMIO_VOLUME_NAME="dremio-data"
DREMIO_MEMORY="1g"                            # Memory limit
DREMIO_STARTUP_TIMEOUT="720"                  # Startup timeout in seconds (12 minutes)

# =============================================================================
# AIRFLOW CONFIGURATION (Workflow Orchestration)
# =============================================================================
AIRFLOW_CONTAINER_NAME="${PROJECT_NAME}-airflow"
AIRFLOW_IMAGE="apache/airflow:2.7.0-python3.9"
AIRFLOW_PORT="8090"                           # Web UI port
AIRFLOW_MEMORY="1g"                           # Memory limit
AIRFLOW_CPUS="1"                              # CPU limit
AIRFLOW_STARTUP_TIMEOUT="300"                 # Startup timeout in seconds (5 minutes)
AIRFLOW_ADMIN_USER="admin"                    # Admin username
AIRFLOW_ADMIN_PASSWORD="admin"                # Admin password
AIRFLOW_ADMIN_EMAIL="admin@example.com"       # Admin email

# Airflow Runtime Configuration
AIRFLOW_PARALLELISM="2"                       # Max parallel tasks
AIRFLOW_MAX_ACTIVE_TASKS_PER_DAG="2"         # Max tasks per DAG
AIRFLOW_WORKERS="1"                           # Web server workers

# =============================================================================
# ZINCSEARCH CONFIGURATION (Lightweight Search Engine)
# =============================================================================
ZINCSEARCH_CONTAINER_NAME="${PROJECT_NAME}-zincsearch"
ZINCSEARCH_IMAGE="public.ecr.aws/zinclabs/zincsearch:latest"
ZINCSEARCH_HTTP_PORT="4080"                   # ZincSearch API port
ZINCSEARCH_MEMORY="512m"
ZINCSEARCH_VOLUME_NAME="zincsearch-data"
ZINCSEARCH_ADMIN_USER="admin"
ZINCSEARCH_ADMIN_PASSWORD="admin"

# =============================================================================
# REDPANDA CONFIGURATION (Kafka-Compatible Streaming)
# =============================================================================
REDPANDA_CONTAINER_NAME="${PROJECT_NAME}-redpanda"
REDPANDA_IMAGE="docker.redpanda.com/redpandadata/redpanda:latest"
REDPANDA_KAFKA_PORT="9092"                   # Kafka API port
REDPANDA_ADMIN_PORT="9644"                   # Admin API port
REDPANDA_PANDAPROXY_PORT="8100"              # REST Proxy port (changed from 8082 to avoid Spark conflict)
REDPANDA_SCHEMA_REGISTRY_PORT="8101"         # Schema Registry port (changed from 8081 to avoid Spark conflict)
REDPANDA_MEMORY="1g"
REDPANDA_VOLUME_NAME="redpanda-data"

# =============================================================================
# POSTFIX CONFIGURATION (Email Server)
# =============================================================================
POSTFIX_CONTAINER_NAME="${PROJECT_NAME}-postfix"
POSTFIX_IMAGE="catatnight/postfix:latest"
POSTFIX_SMTP_PORT="1587"                     # SMTP port
POSTFIX_MEMORY="256m"
POSTFIX_VOLUME_NAME="postfix-data"
POSTFIX_HOSTNAME="mail.example.com"
POSTFIX_DOMAIN="example.com"
POSTFIX_RELAY_HOST=""                        # Optional relay host
POSTFIX_RELAY_PORT="587"                     # Relay port
POSTFIX_RELAY_USER=""                        # Relay username
POSTFIX_RELAY_PASS=""                        # Relay password

# =============================================================================
# DEX CONFIGURATION (OIDC Identity Provider)
# =============================================================================
DEX_CONTAINER_NAME="${PROJECT_NAME}-dex"
DEX_IMAGE="ghcr.io/dexidp/dex:latest"
DEX_HTTP_PORT="5556"                         # HTTP API port
DEX_GRPC_PORT="5557"                         # gRPC API port
DEX_MEMORY="256m"
DEX_VOLUME_NAME="dex-data"
DEX_ISSUER="http://localhost:5556/dex"

# =============================================================================
# APACHE SPARK CONFIGURATION (Distributed Computing)
# =============================================================================
SPARK_MASTER_CONTAINER_NAME="${PROJECT_NAME}-spark-master"
SPARK_WORKER_CONTAINER_PREFIX="${PROJECT_NAME}-spark-worker"
SPARK_IMAGE="apache/spark:latest"
SPARK_MASTER_PORT="7077"                     # Spark master port
SPARK_MASTER_WEB_PORT="8070"                 # Master web UI port (changed from 8080 to avoid Dremio conflict)
SPARK_WORKER_WEB_PORT_BASE="8200"            # Worker web UI base port (changed from 8081 to avoid Redpanda conflict)
SPARK_MEMORY="1g"                            # Master memory
SPARK_WORKER_MEMORY="1g"                     # Worker memory
SPARK_WORKER_CORES="1"                       # Worker CPU cores
SPARK_WORKER_COUNT="1"                       # Number of workers
SPARK_VOLUME_NAME="spark-data"

# =============================================================================
# SIMULATOR CONFIGURATION (For DAG Integration)
# =============================================================================
SIMULATOR_HOST="host.containers.internal"     # Host for simulator
SIMULATOR_PORT="8888"                         # Simulator port
SIMULATOR_URL="http://${SIMULATOR_HOST}:${SIMULATOR_PORT}"

# =============================================================================
# RESOURCE LIMITS (Adjust for your hardware)
# =============================================================================
BASIC_SETUP_MEMORY="1.3GB"                   # MinIO + Dremio memory usage
FULL_SETUP_MEMORY="2.3GB"                    # Full stack memory usage

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
DEFAULT_LOG_LINES="20"                       # Default log lines to show
VERBOSE_LOGGING="false"                       # Enable verbose logging

# =============================================================================
# DEVELOPMENT FLAGS
# =============================================================================
DEVELOPMENT_MODE="true"                       # Enable development features
AUTO_CREATE_VOLUMES="true"                   # Auto-create Docker volumes
CLEANUP_ON_EXIT="false"                      # Cleanup containers on exit